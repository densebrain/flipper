plugins {
    id("com.android.library")
    id("maven")
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    compileOptions {
        sourceCompatibility sourceCompatibilityVersion
        targetCompatibility targetCompatibilityVersion
    }
    
    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        buildConfigField "boolean", "IS_INTERNAL_BUILD", 'true'
        
        ndk {
            abiFilters 'arm64-v8a'
//            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        }

        externalNativeBuild {
            cmake {
                arguments '-DANDROID_TOOLCHAIN=clang', '-DANDROID_STL=c++_shared'
                targets 'flipper'//, 'event', 'event_extra', 'event_core'
            }
        }
    }

    lintOptions {
        abortOnError false
    }



    sourceSets {

        test {
            java {
                exclude 'com/facebook/flipper/plugins/facebook/**'
            }
        }
    }


    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }

    repositories {
        maven { url 'https://jitpack.io' }
    }
    

}

dependencies {
    compileOnly deps.lithoAnnotations
    implementation project(':fbjni')
    implementation project(':sonarcpp')
    implementation deps.soloader
    implementation deps.jsr305
    implementation deps.mdns
    implementation deps.supportAppCompat
    implementation deps.stetho
    implementation deps.okhttp3
    implementation deps.lithoCore
    implementation deps.lithoSectionsDebug
    implementation deps.lithoSectionsCore
    implementation deps.lithoWidget
    implementation deps.rhino
    implementation deps.fresco
    implementation deps.frescoFlipper
    implementation deps.frescoStetho
    implementation(
      'io.reactivex.rxjava2:rxandroid:2.1.1',
      'io.reactivex.rxjava2:rxjava:2.2.8',
      'org.reactivestreams:reactive-streams:1.0.2'
    )


    compileOnly deps.leakcanary

    testImplementation deps.mockito
    testImplementation deps.robolectric
    testImplementation deps.hamcrest
    testImplementation deps.junit
}

preBuild.dependsOn(tasks.getByPath(':third-party:prepare'))

apply from: rootProject.file('gradle/release.gradle')

tasks.create("sourcesJar", Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

artifacts.add('archives', sourcesJar)
