/**
 * Flowtype definitions for index
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.8.0
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */


/**
 * Creates a new instance of JSS.
 */
declare module "jss" {
  declare export type Style = {
    [key: string]: Style | any
  };
  declare export type Styles<Name: string = string> = Record<Name, Style>;
  declare export type Classes<Name: string = string> = Record<Name, string>;
  declare export type Keyframes<Name: string = string> = Record<Name, string>;
  declare export type GenerateId = (rule: Rule, sheet?: StyleSheet<string>) => string;
  declare export type JssValue =
    | string
    | number
    | Array<string | number | Array<string | number> | "!important">
    | null
    | false;
  declare export type CreateGenerateId = () => GenerateId;
  declare export type InsertionPoint = string | HTMLElement;
  declare export interface UpdateOptions {
    process?: boolean;
    force?: boolean;
  }
  declare export interface ToCssOptions {
    indent?: number;
    allowEmpty?: boolean;
  }
  declare interface RuleListOptions {
    classes: Classes<>;
    generateClassName: GenerateId;
    Renderer: Renderer;
    jss: Jss;
    sheet: StyleSheet<>;
    parent: ContainerRule | StyleSheet<>;
  }
  declare class RuleList {
    constructor(options: RuleListOptions): this;
    add(name: string, decl: Style, options?: RuleOptions): Rule;
    get(name: string): Rule;
    remove(rule: Rule): void;
    indexOf(rule: Rule): number;
    process(): void;
    register(rule: Rule, className?: string): void;
    unregister(rule: Rule): void;
    update(name: string, data: {}): void;
    update(data: {}): void;
    toString(options?: ToCssOptions): string;
  }
  declare interface RuleOptions {
    selector?: string;
    sheet?: StyleSheet<>;
    index?: number;
    parent?: ContainerRule | StyleSheet<>;
    classes: Classes<>;
    jss: Jss;
    generateId: GenerateId;
    Renderer: Renderer;
  }
  declare interface BaseRule {
    type: string;
    key: string;
    isProcessed: boolean;
    options: RuleOptions;
    toString(options?: ToCssOptions): string;
  }
  declare type ContainerRule = {
    rules: RuleList
  } & BaseRule;
  declare export interface Plugin {
    onCreateRule?: (name: string, decl: Style, options: RuleOptions) => Rule;
    onProcessRule?: (rule: Rule, sheet?: StyleSheet<>) => void;
    onProcessStyle?: (style: Style, rule: Rule, sheet?: StyleSheet<>) => Style;
    onProcessSheet?: (sheet?: StyleSheet<>) => void;
    onChangeValue?: (
      value: string,
      prop: string,
      rule: Rule
    ) => string | null | false;
    onUpdate?: (
      data: { [key: string]: any },
      rule: Rule,
      sheet?: StyleSheet<>
    ) => void;
  }
  declare export type Rule = BaseRule | ContainerRule;
  declare export interface Renderer {
    setProperty(
      cssRule: HTMLElement | CSSStyleRule,
      prop: string,
      value: JssValue
    ): boolean;
    getPropertyValue(cssRule: HTMLElement | CSSStyleRule, prop: string): string;
    removeProperty(cssRule: HTMLElement | CSSStyleRule, prop: string): void;
    setSelector(cssRule: CSSStyleRule, selectorText: string): boolean;
    attach(): void;
    detach(): void;
    deploy(sheet: StyleSheet<>): void;
    insertRule(rule: Rule): false | CSSRule;
    deleteRule(cssRule: CSSRule): boolean;
    replaceRule(cssRule: CSSRule, rule: Rule): false | CSSRule;
    indexOf(cssRule: CSSRule): number;
    getRules(): CSSRuleList | void;
  }
  declare interface RuleFactoryOptions {
    selector?: string;
    classes?: { [key: string]: any };
    sheet?: StyleSheet<>;
    index?: number;
    jss?: Jss;
    generateId?: GenerateId;
    Renderer?: Renderer;
  }
  declare export interface StyleSheetFactoryOptions {
    media?: string;
    meta?: string;
    index?: number;
    link?: boolean;
    element?: HTMLStyleElement;
    generateId?: GenerateId;
    classNamePrefix?: string;
  }
  declare type StyleSheetOptions = {
    index: number,
    generateId: GenerateId,
    Renderer: Renderer,
    insertionPoint?: InsertionPoint,
    jss: Jss
  } & StyleSheetFactoryOptions;
  declare class SheetsRegistry {
    index: number;
    add(sheet: StyleSheet<any>): void;
    reset(): void;
    remove(sheet: StyleSheet<any>): void;
    toString(options?: ToCssOptions): string;
  }
  declare class SheetsManager {
    size: number;
    get(key: { [key: string]: any }): StyleSheet<> | null;
    add(key: { [key: string]: any }, sheet: StyleSheet<>): void;
    manage(key: { [key: string]: any }): StyleSheet<> | null;
    unmanage(key: { [key: string]: any }): void;
  }
  declare export interface StyleSheet<RuleName: string = string> {
    classes: Classes<RuleName>;
    keyframes: Keyframes<string>;
    options: StyleSheetOptions;
    linked: boolean;
    attached: boolean;
    
    /**
     * Attach renderable to the render tree.
     */
    attach(): this;
    
    /**
     * Remove renderable from render tree.
     */
    detach(): this;
    deploy(): this;
    
    /**
     * Add a rule to the current stylesheet.
     * Will insert a rule also after the stylesheet has been rendered first time.
     */
    addRule(style: Style, options?: $Shape<RuleOptions>): Rule;
    addRule(name: RuleName, style: Style, options?: $Shape<RuleOptions>): Rule;
    insertRule(rule: Rule): void;
    
    /**
     * Create and add rules.
     * Will render also after Style Sheet was rendered the first time.
     */
    addRules(
      styles: $Shape<Styles<RuleName>>,
      options?: $Shape<RuleOptions>
    ): Rule[];
    
    /**
     * Get a rule by name.
     */
    getRule(name: RuleName): Rule;
    
    /**
     * Delete a rule by name.
     * Returns `true`: if rule has been deleted from the DOM.
     */
    deleteRule(name: RuleName): boolean;
    
    /**
     * Get index of a rule.
     */
    indexOf(rule: Rule): number;
    
    /**
     * Update the function values with a new data.
     */
    update(
      name: string,
      data: { [key: string]: any },
      options?: UpdateOptions
    ): this;
    update(data: { [key: string]: any }, options?: UpdateOptions): this;
    
    /**
     * Convert rules to a CSS string.
     */
    toString(options?: ToCssOptions): string;
  }
  declare export interface JssOptions {
    createGenerateId: CreateGenerateId;
    plugins: $ReadOnlyArray<Plugin>;
    Renderer?: Renderer | null;
    insertionPoint: InsertionPoint;
  }
  declare export interface Jss {
    createStyleSheet<Name: string>(
      styles: $Shape<Styles<Name>>,
      options?: StyleSheetFactoryOptions
    ): StyleSheet<Name>;
    removeStyleSheet(sheet: StyleSheet<>): this;
    setup(options?: $Shape<JssOptions>): this;
    use(...plugins: Plugin[]): this;
    createRule(style: Style, options?: RuleFactoryOptions): Rule;
    createRule<Name: string>(
      name: Name,
      style: Style,
      options?: RuleFactoryOptions
    ): Rule;
  }
  
  declare var sheets: SheetsRegistry;
    declare export {sheets, SheetsManager, SheetsRegistry, RuleList};
  
  declare export function create(options?: $Shape<JssOptions>): Jss;
  
  declare export function createGenerateId(): GenerateId;
  
  declare export function createRule(
    name: string,
    decl: Style,
    options: RuleOptions
  ): Rule;
  
  declare export function toCssValue(
    value: JssValue,
    ignoreImportant: boolean
  ): string;
  
  declare export function getDynamicStyles(styles: Styles<>): Styles<> | null;
  
  declare var jss: Jss;
  declare export default typeof jss;
};
